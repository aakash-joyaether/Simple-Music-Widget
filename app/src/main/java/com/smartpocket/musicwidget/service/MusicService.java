package com.smartpocket.musicwidget.service;


import android.app.Service;
import android.appwidget.AppWidgetManager;
import android.content.ComponentName;
import android.content.Intent;
import android.os.IBinder;
import android.os.SystemClock;
import android.util.Log;
import android.view.View;
import android.widget.RemoteViews;

import com.smartpocket.musicwidget.MusicWidget;
import com.smartpocket.musicwidget.R;
import com.smartpocket.musicwidget.backend.MusicLoader;
import com.smartpocket.musicwidget.backend.MusicNotification;
import com.smartpocket.musicwidget.model.Song;
import com.smartpocket.musicwidget.musicplayer.MusicPlayer;
import com.smartpocket.musicwidget.musicplayer.MusicPlayerCompletionListener;

import java.io.IOException;


public class MusicService extends Service implements MusicPlayerCompletionListener 
{
	private static final String TAG = "Music Service";
	private static final int ONGOING_NOTIFICATION_ID = 1;
	private MusicPlayer player;
	private MusicNotification mNotification;

	@Override
	public void onCreate() {
		/* let's wait until the debugger attaches */
        //android.os.Debug.waitForDebugger();
		
		Log.d(TAG, "onCreate()");

		player = new MusicPlayer(this);
		player.setOnCompletionListener(this);
	}

	@Override
	public int onStartCommand(Intent intent, int flags, int startId) {
		String action = intent.getAction() != null ? intent.getAction() : "";
		
		try {
			if (action.equals(MusicWidget.ACTION_PLAY_PAUSE))
			{
					playMusic();

			}
			else if (action.equals(MusicWidget.ACTION_STOP))
			{
				stopMusic();
			}

		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		return START_STICKY;
	}


	@Override
	public void onDestroy() 
	{
		Log.d(TAG, "DESTROY SERVICE");
		if (player != null && !player.isStopped())
			stopMusic();
		
		super.onDestroy();		
	}
	
	private void updateUI(String title, String artist, String duration, Boolean isPlaying){
		// Update widget
		
		// We need to use the RemoteViews generated by the MusicWidget, class to make sure we preserve the pending intents for the buttons.
		// Otherwise the widget's buttons can stop responding to touch events.
		RemoteViews remoteViews = MusicWidget.getRemoteViews(this);
		
		if (title != null && artist != null && duration != null){
			remoteViews.setViewVisibility(R.id.layoutTextViews, View.VISIBLE);
			remoteViews.setTextViewText(R.id.textViewTitle, title);
			remoteViews.setTextViewText(R.id.textViewArtist, artist);
			remoteViews.setTextViewText(R.id.textViewDuration, duration);
			remoteViews.setChronometer(R.id.simpleChronometer, SystemClock.elapsedRealtime(),null,true);
		} else {
			remoteViews.setViewVisibility(R.id.layoutTextViews, View.GONE);
		}

		ComponentName thisWidget = new ComponentName(this, MusicWidget.class);
		AppWidgetManager manager = AppWidgetManager.getInstance(this);
		manager.updateAppWidget(thisWidget, remoteViews);
		
		// Create/Update a notification, to run the service in foreground
		if (artist != null && title != null) {
			if (mNotification == null) {
				mNotification = new MusicNotification(this, ONGOING_NOTIFICATION_ID, title, artist);
				startForeground(ONGOING_NOTIFICATION_ID, mNotification.getNotification());
			} else {
				boolean isPlayingUnboxed = isPlaying != null ? isPlaying : false;
				mNotification.update(title, artist, isPlayingUnboxed);
			}
		} else {
			stopForeground(true);
		}
	}
	
	private void playMusic() throws IOException
	{
		Log.d(TAG, "PLAY");
		Song song = MusicLoader.getInstance(this).getRandom();

			player.setSong(song);
			player.play();

	
		updateUI(song.getTitle(), song.getArtist(), song.getDurationStr(), true);
		Log.i("Music Service", "Playing: " + song.getTitle());
	}

	private void stopMusic()
	{	
		Log.d(TAG, "STOP MUSIC");
		
		player.stop();
		updateUI(null, null, null, false);
		MusicLoader.getInstance(this).close();
		
		stopSelf();
	}
	
	private void nextSong() throws IOException
	{
		Log.d(TAG, "NEXT Random SONG");
		
		if (player != null) {
			Song nextSong = MusicLoader.getInstance(this).getRandom();
			player.setSong(nextSong);
			
			updateUI(nextSong.getTitle(), nextSong.getArtist(), nextSong.getDurationStr(), player.isPlaying());
		}
	}


	
	@Override
	public void onMusicCompletion() throws IOException {
		nextSong();
		player.play();
		Song song = MusicLoader.getInstance(this).getCurrent();
		updateUI(song.getTitle(), song.getArtist(), song.getDurationStr(), true);
	}
	
	@Override
	public IBinder onBind(Intent intent) 
	{	
		return null;
	}
}
